// <auto-generated />
using System;
using BarberBookingWeb.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BarberBookingWeb.Migrations
{
    [DbContext(typeof(BarberBookingWebContext))]
    partial class BarberBookingWebContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.23")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("BarberBookingWeb.Models.Barber", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<int?>("BarberShopID")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nume")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Parola")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Prenume")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telefon")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("BarberShopID");

                    b.ToTable("Barber");
                });

            modelBuilder.Entity("BarberBookingWeb.Models.BarberShop", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("Adresa")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Telefon")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("BarberShop");
                });

            modelBuilder.Entity("BarberBookingWeb.Models.Client", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nume")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Parola")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Prenume")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Client");
                });

            modelBuilder.Entity("BarberBookingWeb.Models.Programare", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<int?>("BarberID")
                        .HasColumnType("int");

                    b.Property<int?>("ClientID")
                        .HasColumnType("int");

                    b.Property<DateTime>("Data")
                        .HasColumnType("datetime2");

                    b.Property<string>("Locatia")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("BarberID");

                    b.HasIndex("ClientID");

                    b.ToTable("Programare");
                });

            modelBuilder.Entity("BarberBookingWeb.Models.Serviciu", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<int?>("BarberID")
                        .HasColumnType("int");

                    b.Property<decimal>("Cost")
                        .HasColumnType("decimal(6,2)");

                    b.Property<string>("Descriere")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tip")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("BarberID");

                    b.ToTable("Serviciu");
                });

            modelBuilder.Entity("BarberBookingWeb.Models.Barber", b =>
                {
                    b.HasOne("BarberBookingWeb.Models.BarberShop", null)
                        .WithMany("Barbers")
                        .HasForeignKey("BarberShopID");
                });

            modelBuilder.Entity("BarberBookingWeb.Models.Programare", b =>
                {
                    b.HasOne("BarberBookingWeb.Models.Barber", "Barber")
                        .WithMany("Programari")
                        .HasForeignKey("BarberID");

                    b.HasOne("BarberBookingWeb.Models.Client", "Client")
                        .WithMany("Programari")
                        .HasForeignKey("ClientID");

                    b.Navigation("Barber");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("BarberBookingWeb.Models.Serviciu", b =>
                {
                    b.HasOne("BarberBookingWeb.Models.Barber", "Barber")
                        .WithMany("Servicii")
                        .HasForeignKey("BarberID");

                    b.Navigation("Barber");
                });

            modelBuilder.Entity("BarberBookingWeb.Models.Barber", b =>
                {
                    b.Navigation("Programari");

                    b.Navigation("Servicii");
                });

            modelBuilder.Entity("BarberBookingWeb.Models.BarberShop", b =>
                {
                    b.Navigation("Barbers");
                });

            modelBuilder.Entity("BarberBookingWeb.Models.Client", b =>
                {
                    b.Navigation("Programari");
                });
#pragma warning restore 612, 618
        }
    }
}
